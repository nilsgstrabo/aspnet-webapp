x-redis: &redis bitnami/redis:latest
x-default-requests: &request
  memory: 201M
  cpu: 56m
x-default-limit: &limit
  memory: 201M
  cpu: 56m    
x-resources: &resources
  requests: *request
  limits: *limit

x-volumeMounts: &volumemounts
  - name: tmp
    path: /tmp
    emptyDir:
      sizeLimit: 1M

apiVersion: radix.equinor.com/v1
kind: RadixApplication
metadata:
  name: oauth-demo
spec:
  dnsAppAlias:
    component: web
    environment: dev
  dnsAlias:
    - alias: nils
      environment: dev
      component: web
  # dnsExternalAlias:
  #   - alias: myapp.equinor.com
  #     component: web
  #     environment: dev
  #   - alias: first.example.com
  #     component: web
  #     environment: dev
  #     useCertificateAutomation: true
  #   - alias: another.example.com
  #     component: web
  #     environment: dev
  #     useCertificateAutomation: true
  #   - alias: ngsapp.dev.radix.equinor.com
  #     component: web
  #     environment: dev
  #     useCertificateAutomation: true
  #   - alias: radixacmetest.equinor.com
  #     component: web
  #     environment: dev
  #     useCertificateAutomation: true      
  build:
    secrets:
      - SECRET1
      - SECRET2
    useBuildKit: true
    useBuildCache: true
  environments:
    - name: dev
      build:
        from: main
    - name: qa
    - name: prod
      build:
        from: release
  components:
    - name: web
      dockerfilename: Dockerfile
      identity:
        azure:
          clientId: b96d264b-7053-4465-a4a7-32be5b0fec49
      variables:
        ASPNETCORE_URLS: http://*:5005
        KEY_VAULT_URL: https://radix-sci-az-kv-test.vault.azure.net/
        SQL_SERVER_NAME: "radix-test-server-delete-me.database.windows.net"
        SQL_DATABASE_NAME: "radix-test-database-delete-me"
        MEGA_FILE_SIZE: "1000"
        ENABLE_PROXY_BUFFERING: "true"
        DOTNET_EnableDiagnostics: "0"
      ports:
        - name: http
          port: 5005
      publicPort: http
      secretRefs:
        azureKeyVaults:
          - items:
              - name: secret1
                envVar: SECRET1
            name: radix-sci-az-kv-test
      environmentConfig:
        - environment: dev
          readOnlyFileSystem: true
          # horizontalScaling:
          #   maxReplicas: 1
          kedaScaling: # ref https://keda.sh/docs/2.13/concepts/scaling-deployments/
            pollingInterval: 10 # required?
            cooldownPeriod: 60 # required?
            minReplicaCount: 0
            maxReplicaCount: 5
            fallback:
              failureThreshold: 5
              replicas: 1
            triggers:
              - name: azureservicebus #required
                azureServiceBus: # ref https://keda.sh/docs/2.13/scalers/azure-service-bus/
                  messageCount: 10 # required
                  activationMessageCount: 1 # optional, default 0
                  queueName: foo-queue 
                  topicName: foo-topid
                  subscriptionName: foo-topic-sub
                  namespace: service-bus-namespace # should probably not be exposed. Not a secret, but gives an attacker an entrypoint. Can we store it in a CM and let users manage the value via Web/CLI?
                  authentication: # optional. If omitted, create a secret with connection string that use sets in Web/CLI
                    clientId: xxx # required 



          volumeMounts:
            # - name: temp
            #   path: /tmp
            #   emptyDir:
            #     sizeLimit: 5Ti


            - name: videos
              path: /mnt/videos
              blobFuse2:
                protocol: fuse2
                container: videos
                uid: "1001"
                accessMode: ReadWriteMany
                streaming: 
                  enabled: true
          variables:
            VIDEO_PATH: "/mnt/videos"
      resources: *resources
      authentication:
        oauth2:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
          setXAuthRequestHeaders: true
          setAuthorizationHeader: true
          sessionStoreType: redis
          scope: openid email profile offline_access # https://graph.microsoft.com/User.Read
          redisStore:
            connectionUrl: redis://redis:6379
    - name: redis
      image: *redis
      secrets:
        - REDIS_PASSWORD
      ports:
        - name: redis
          port: 6379
      resources:
        limits:
          memory: 50M
          cpu: 50m
        requests:
          memory: 50M
          cpu: 50m
    - name: proxy
      src: proxy
      ports:
        - name: http
          port: 8080
      publicPort: http
      readOnlyFileSystem: true
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
        limit:
          cpu: 50m
          memory: 100Mi
      authentication:
        oauth2:
          clientId: 5e48ca1f-a2bf-4dec-b96d-bbf8ce69f9f6
          setXAuthRequestHeaders: true
          setAuthorizationHeader: true
          sessionStoreType: redis
          scope: openid email profile offline_access # https://graph.microsoft.com/User.Read
          redisStore:
            connectionUrl: redis://redis:6379   
      environmentConfig:
        - environment: dev
          volumeMounts: *volumemounts
    - name: simple
      src: /simpleweb
      ports:
        - name: http
          port: 9001
      publicPort: http
      variables:
        TIMEOUT: 5m
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
          

